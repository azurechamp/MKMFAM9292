<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set up the variables

//Back to slingshot
backTo = false;
    
//Starting cats number
numOfCats = 4;

//These are the "game states" used to control when things happen...
/* turns are:
    0 - initial, 10 - put new cat in sling shoot
    11 - waiting for new cat, 12 - cat is flying
    13 - camera is going back, 14 - camera is ready -&gt; go to 10
    80 - waiting
    99 - game over, 100 - game won
*/
    
kSTATE_INITIAL = 0;
kSTATE_PUT_NEW_CAT_IN_SLINGSHOT=10;
kSTATE_WAITING_FOR_NEW_CAT=11;
kSTATE_CAT_IS_FLYING=12;
kSTATE_CAMERA_IS_GOING_BACK=13;
kSTATE_CAMERA_IS_READY=14;
kSTATE_WAITING=80;
kSTATE_GAME_OVER=99;
kSTATE_GAME_WON=100;

//Current turn controller  
turn = kSTATE_INITIAL;

//Start score
score = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check the number of cats left and make game over or win condition
if instance_number( oBird ) == 0
{
turn = kSTATE_GAME_WON;
} 
else turn = kSTATE_GAME_OVER;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///manage turns
switch( turn )
{
case kSTATE_INITIAL:
    // initial one
    for(i=0; i&lt;numOfCats; i+=1)
        { // create 4 cats
        instance_create(oSlingshot.x- 40 - (i*50), 760, objCatWaiting);
        }
    turn = kSTATE_PUT_NEW_CAT_IN_SLINGSHOT;
    break;
case kSTATE_PUT_NEW_CAT_IN_SLINGSHOT:
    // put cat in catapult
    var _c;
    _c = instance_nearest(oSlingshot.x, oSlingshot.y, objCatWaiting);
    _c.jump = true;
    view_object[0] = -1; // to enable moving camera
    turn = kSTATE_WAITING_FOR_NEW_CAT;
    break;
case kSTATE_CAMERA_IS_GOING_BACK:
    // check that we've got cats
    if instance_number( oBird ) == 0
        {
        turn = kSTATE_GAME_WON;
        }
    else if instance_number( objCatWaiting ) == 0
        {
        turn = kSTATE_GAME_OVER;
        alarm[0] = room_speed * 4;
        } 
    break;
case kSTATE_CAMERA_IS_READY:
    if view_xview[0] &lt; 1
        {
        turn = kSTATE_PUT_NEW_CAT_IN_SLINGSHOT;
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// camera movement

//Check the state and either, move back to slingshot or follow the angry cat through the level.
switch( turn )
{
case kSTATE_GAME_OVER:
case kSTATE_GAME_WON:
    exit;
    break;
case kSTATE_CAT_IS_FLYING:
    if (!instance_exists(objAngryCat))
        {
        turn = kSTATE_CAMERA_IS_GOING_BACK;
        }
    else
        {
        backTo = 90;
        view_object[0] = objAngryCat;
        view_hspeed[0] = 15;   
        }   
    break;
case kSTATE_CAMERA_IS_GOING_BACK:
    if backTo &gt; 0
        {
        backTo -= 1;
        }
    else
        {
        view_object[0] = oSlingshot;
        view_hspeed[0] = 30;
        turn = kSTATE_CAMERA_IS_READY;
        }
    break;
} 

//Parallax the background...
background_x[0] = view_xview[0] / 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check for the restart button being pressed
if mouse_x &gt; view_xview[0] + 32 &amp;&amp; mouse_x &lt; view_xview[0] + 96 &amp;&amp; mouse_y &gt; view_yview[0] + 32 &amp;&amp; mouse_y &lt; view_yview[0] + 96 room_restart();

//Setup vars
var mx, my;
mx = device_mouse_raw_x(0);
my = device_mouse_raw_y(0);

//Check turn value for game restart
switch(turn)
{
case kSTATE_GAME_OVER:
case kSTATE_GAME_WON:
game_restart();
break;
} // end switch

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Permit the mouse button to move the view

//Create vars
var _mouse_x_ortho, ww;

//Get the mouse position in the SCREEN
_mouse_x_ortho = device_mouse_raw_x(0);
ww = view_wview[0] / 2;

//Check state
if turn == kSTATE_WAITING_FOR_NEW_CAT
{
//Move the view
if _mouse_x_ortho &lt; ww - 100
    {
    view_xview[0] = max(0, view_xview[0] - 10);
    }
else
    {
    if _mouse_x_ortho &gt; ww + 100 view_xview[0] = min(room_width - 1024, view_xview[0] + 10);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw restart button    
draw_sprite(sprButRestart,0, 64, 64);

//Draw score
draw_set_color(c_white);
draw_set_font(fntMain);
draw_text(64, window_get_height() - 100, 'Score: ' + string(score));

//draw lives or win/lose sprites
var vw, vh;
vw = view_wview[0] / 2;
vh = view_hview[0] / 2;

switch( turn )
{
    case kSTATE_INITIAL:
    case kSTATE_PUT_NEW_CAT_IN_SLINGSHOT:
    case kSTATE_WAITING_FOR_NEW_CAT:
    case kSTATE_CAT_IS_FLYING:
    case kSTATE_CAMERA_IS_GOING_BACK:
    case kSTATE_CAMERA_IS_READY:
        var _c, i;
        _c = instance_number(oBird);
        if _c &gt; 0
        for (i=vw - (_c/3 * 40); i&lt;=vw + (_c/3 * 40); i+=40)
            {
            draw_sprite_ext(sprPidgeon,0,i,50,1,1,0,c_white,1);
            }
        break;
    case kSTATE_WAITING:
        break;
    case kSTATE_GAME_OVER:
        draw_sprite(sprTitle, 0, vw, vh);
        break;
    case kSTATE_GAME_WON:
        draw_sprite(sprEnd, 0, vw, vh);
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
