<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFloor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This is the "parent" block for all other blocks in the game
//Some of these variables will be changed in the "children" blocks.



//Prevent the sprite from animating
image_speed = 0;

//Set the damage variable. This will count how much damage has been done to the instance
damage = 0;

//This "locks" the damghe variable so that a continuous contact with an instance will not destroy it instantly.
lock = 20;

//How many steps should be counted before another damage check is done.
lockTime = 30;

//Set Physics variables   
density = WOOD_DE;
restitution = WOOD_RE;
limit = WOOD_LIMIT;

//Set sound effect
snd = sndWood;

//Set "particle" effect when broken
shard = objWoodShard;

//Set sound effect for cat/instance impact
impact = sndWoodImpact;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create broken "particles"
repeat(10) instance_create(x,y,shard);

//Show a score indicator  
var o;
o = instance_create(x,y-10,oScore);
o.text = '100';
score += 100;

//Play a sound
audio_play_sound(snd, 1, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Countdown the "lock" timer
if lock &gt; 0 then lock -= 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFloor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Floor Collision

//Check for lock
if lock &lt;= 0
{
//See if it has moved further than the "limit" value
if abs(x - xprevious) &gt; limit or abs(y-yprevious) &gt; limit
    {
    //Take damage!
    damage +=1;
    //Set the image index
    image_index = damage;
    //Check to see if it should be destroyed
    if damage &gt; 2 then instance_destroy();
    //Reset the lock
    lock = lockTime;
    //Play a sound
    audio_play_sound(impact, 1, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objAngryCat">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cat Collisions

//Check to see if instance is locked
if lock &lt;= 0
{
//Check and see if the other instance is moving faster than the "limit"
if abs(other.x - other.xprevious) &gt; limit or abs(other.y - other.yprevious) &gt; limit
    {
    //Take damage!
    damage += 1;
    //Set the image index
    image_index = damage;
    //Check the damage and destroy if necessary
    if damage &gt; 2 then instance_destroy();
    //Reset the lock
    lock = 30;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_parentBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Block Collisions

//Check to see if locked or not to take take damage
if lock &lt;= 0
{
//No lock, so check and see how far it has moved compared to the limit value
if abs(x - xprevious) &gt; limit or abs(y - yprevious) &gt; limit
    {
    //It has taken damage!
    damage +=1;
    //Set the image index
    image_index = damage;
    //Check to see if we should destroy the instance
    if damage &gt; 2 then instance_destroy();
    //Set lock again
    lock = lockTime;
    //Play sound
    audio_play_sound(impact, 1, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Create the physics rigid body definition

//Create a temporary fixture
var mainFixture;
mainFixture = physics_fixture_create();

//Setup the physics fixture definition
physics_fixture_set_box_shape(mainFixture, sprite_get_width(sprite_index) / 2, sprite_get_height(sprite_index) / 2);
physics_fixture_set_density(mainFixture, density);
physics_fixture_set_restitution(mainFixture, restitution);
physics_fixture_set_linear_damping(mainFixture, 0.3);

// Bind the fixture to this instance (otherwise use with (inst) { bind_fixture })
physics_fixture_bind(mainFixture, id);

// Clean up the fixture since we're not going to re-use it
physics_fixture_delete(mainFixture);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,8</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
