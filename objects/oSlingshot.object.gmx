<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSlingshot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Setup catapult vars...
dragging = false;
canShoot = false;
fired = false;

dragX = 0;
dragXmax = 128;
dragY = 0;
dragYmax = 64;
dragMax = 128;
    
image_speed = 0;
image_index = 1;

//Create a dummy catapult so the cats appear to be fired through the middle
instance_create(x,y,oSlingshotRest);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Destroy the dummy part too
with (oSlingshotRest) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the dragging vars if being clicked by mouse
if dragging
{
var _len,_dir;
//get distance from x/y to mouse x/y
_len = point_distance(x,y,min(x,mouse_x),mouse_y);
//Get the direction too, but limit it so that the player cannot shoot anywhere they shouldn't
_dir = min(max(100, point_direction(x,y,min(x,mouse_x),mouse_y)), 260);
//Store the (limited) x/y position of the drag
dragX = x + lengthdir_x( min( _len, dragMax), _dir );
dragY = y + lengthdir_y( min( _len, dragMax), _dir );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check to see if being dragged
if dragging
{
//reset vars
dragging = false;
canShoot = false;
fired = true;
//Set the game controller instance state
oController.turn = oController.kSTATE_CAT_IS_FLYING;
//create Angry Cat!!!
var a;
a = instance_create(dragX, dragY, objAngryCat);
//Apply a "push" to the angry cat physics by getting the vector
//from it's created x/y position to the catapult x/y position.
with (a)
    {
    physics_apply_impulse(x,y, (other.x - x) * 2,-(y - other.y) * 2);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check to see if the player can shoot a cat
if canShoot
{
//Check to see if the mouse is actually in the correct position to click on the slingshot
if (mouse_x &lt; x + 64 &amp;&amp; mouse_y &gt; y - 128)
    {
    //Set dragging and play a sound
    dragging = true;
    audio_play_sound(sndStretch, 1, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Prepare temp vars
var _x2,_y2,_cat;
_x2 = x;
_y2 = y;
_cat = sprCatIdle;
if CAT_IS_BLACK _cat = sprCatIdleBlack;

//Check for dragging
if dragging
{
_x2 = dragX;
_y2 = dragY;
}
else
{
//If fired, make the sling follow the angry cat a bit...
if fired
    {
    if instance_exists(objAngryCat)
        {
        _x2 = objAngryCat.x;
        _y2 = objAngryCat.y;
        if _x2 &gt; x + 20 fired = false;
        }
    else
        {
        fired = false;
        }
    }
}

//set draw color to brown
draw_set_color(make_color_rgb(46,22,0));

if (dragging || fired || canShoot)
{
//draw the sling elastic
draw_line_width(x+18,y-5, _x2+18,_y2+10,6);
//draw the sling
draw_sprite(sprCatapultBack,0,_x2,_y2+15);
//Draw the catapult
draw_self();
//Draw the cat in the sling
if !fired then draw_sprite_ext(_cat,0,_x2,_y2,1,1,0,c_white,1);
//draw the front of the catapult
draw_sprite(sprCatapultFront,0,_x2-5,_y2+15);
//draw the second elastic
draw_line_width(x-18,y, _x2+5,_y2+14,6);
}
else
{
draw_self();
}

draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
