<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
initial_x = 0;
initial_y = 0;
initial_w = view_wview[0];
initial_h = view_hview[0];
initial_zoom = 0;
view_scale = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
// Get the positions of the two fingers
var mx0, my0, mx1, my1, mx0raw, my0raw, mx1raw, my1raw;
mx0 = device_mouse_x(0); my0 = device_mouse_y(0);
mx1 = device_mouse_x(1); my1 = device_mouse_y(1);
mx0raw = device_mouse_raw_x(0); my0raw = device_mouse_raw_y(0);
mx1raw = device_mouse_raw_x(1); my1raw = device_mouse_raw_y(1);
// Check whether the second finger is put on the screen
if ( device_mouse_check_button_pressed(1, mb_left) )
{
initial_x = mean(mx0, mx1);
initial_y = mean(my0, my1);
initial_zoom = point_distance(mx0raw, my0raw, mx1raw ,my1raw) * view_scale;
};
// Check whether both fingers are down
if ( device_mouse_check_button(1, mb_left) )
{
// Compute the new scale factor
view_scale = initial_zoom / point_distance(mx0raw, my0raw, mx1raw, my1raw);
if (view_scale &gt; 1) view_scale = 1; // Remove to also reduce the size
// Compute the new view
view_wview[0] = initial_w * view_scale;
view_hview[0] = initial_h * view_scale;
view_xview[0] += initial_x - mean(mx0, mx1);
view_yview[0] += initial_y - mean(my0, my1);
// Keep it within in the room area (remove when you don't want this)
if (view_xview[0] &lt; 0) view_xview[0] = 0
if (view_xview[0] + view_wview[0] &gt; room_width)
view_xview[0] = room_width - view_wview[0];
if (view_yview[0] &lt; 0) view_yview[0] = 0
if (view_yview[0] + view_hview[0] &gt; room_height)
view_yview[0] = room_height - view_hview[0];
};
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
